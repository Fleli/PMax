
// Parser.swift
// Auto-generated by SwiftSLR
// See https://github.com/Fleli/SwiftSLR

class SLRParser {

    private var index: Int = 0
    private var input: [Token] = []
    private var stack: [SLRNode] = []
    private var states: [() throws -> ()] = []
    
    private var accepted = false
    
    private var notExhausted: Bool { index < input.count }
    
    func parse(_ tokens: [Token]) throws -> SLRNode? {
        
        self.index = 0
        self.input = tokens
        
        self.accepted = false
        
        self.stack = []
        self.states = [state_0]
        
        repeat {
            
            try states[states.count - 1]()
            
        } while !accepted
        
        if stack.count != 1 {
            print(stack)
            return nil
        }
        
        return stack[0].children[0]
        
    }
    
    private func shift() {
        
        let token = input[index]
        let slrNode = SLRNode(token)
        stack.append(slrNode)
        index += 1
        
    }
    
    private func reduce(_ numberOfStates: Int, to nonTerminal: String) {
        
        let children = [SLRNode](stack[stack.count - numberOfStates ..< stack.count])
        
        let newNode = SLRNode(nonTerminal, children)
        
        stack.removeLast(numberOfStates)
        states.removeLast(numberOfStates)
        
        stack.append(newNode)
        
    }
    
    private func topOfStackIsToken(_ type: String) -> Bool {
        return topOfStackIsAmong([type])
    }
    
    private func topOfStackIsAmong(_ terminals: Set<String?>) -> Bool {
        
        guard notExhausted else {
            return terminals.contains(nil)
        }
        
        return terminals.contains(input[index].type)
        
    }
    
    private func topOfStackIsNonTerminal(_ type: String) -> Bool {
        
        guard stack.count > 0 else {
            return false
        }
        
        let top = stack[stack.count - 1]
        
        if top.token != nil {
            return false
        }
        
        return type == top.type
        
    }
    
    private func pushState(_ newState: @escaping () throws -> ()) {
        states.append(newState)
    }

	private func state_0() throws {

        if topOfStackIsNonTerminal("TopLevelStatement") {
            pushState(state_4)
            return
        }
        
        if topOfStackIsNonTerminal("TopLevelStatements") {
            pushState(state_5)
            return
        }
        
        if topOfStackIsNonTerminal("Macro") {
            pushState(state_3)
            return
        }
        
        if topOfStackIsNonTerminal("Function") {
            pushState(state_2)
            return
        }
        
        if topOfStackIsNonTerminal("Import") {
            pushState(state_7)
            return
        }
        
        if topOfStackIsNonTerminal("Struct") {
            pushState(state_1)
            return
        }
        
        if topOfStackIsToken("import") {
            shift()
            pushState(state_124)
            return
        }
        
        if topOfStackIsToken("macro") {
            shift()
            pushState(state_8)
            return
        }
        
        if topOfStackIsToken("struct") {
            shift()
            pushState(state_105)
            return
        }
        
        if topOfStackIsToken("func") {
            shift()
            pushState(state_127)
            return
        }
        
        
        if topOfStackIsAmong([Optional("struct"), Optional("macro"), Optional("import"), Optional("func"), nil]) {
            reduce(0, to: "TopLevelStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "Struct")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "Struct")
        }
        
	}
	
	private func state_1() throws {

        
        if topOfStackIsAmong([nil, Optional("macro"), Optional("struct"), Optional("func"), Optional("import")]) {
            reduce(1, to: "TopLevelStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "reduction")
        }
        
	}
	
	private func state_2() throws {

        
        if topOfStackIsAmong([nil, Optional("macro"), Optional("struct"), Optional("func"), Optional("import")]) {
            reduce(1, to: "TopLevelStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "reduction")
        }
        
	}
	
	private func state_3() throws {

        
        if topOfStackIsAmong([nil, Optional("macro"), Optional("struct"), Optional("func"), Optional("import")]) {
            reduce(1, to: "TopLevelStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "reduction")
        }
        
	}
	
	private func state_4() throws {

        
        if topOfStackIsAmong([Optional("struct"), Optional("macro"), Optional("import"), Optional("func"), nil]) {
            reduce(1, to: "TopLevelStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatements", "reduction")
        }
        
	}
	
	private func state_5() throws {

        if topOfStackIsNonTerminal("Struct") {
            pushState(state_1)
            return
        }
        
        if topOfStackIsNonTerminal("Macro") {
            pushState(state_3)
            return
        }
        
        if topOfStackIsNonTerminal("Import") {
            pushState(state_7)
            return
        }
        
        if topOfStackIsNonTerminal("Function") {
            pushState(state_2)
            return
        }
        
        if topOfStackIsNonTerminal("TopLevelStatement") {
            pushState(state_6)
            return
        }
        
        if topOfStackIsToken("macro") {
            shift()
            pushState(state_8)
            return
        }
        
        if topOfStackIsToken("import") {
            shift()
            pushState(state_124)
            return
        }
        
        if topOfStackIsToken("struct") {
            shift()
            pushState(state_105)
            return
        }
        
        if topOfStackIsToken("func") {
            shift()
            pushState(state_127)
            return
        }
        
        
        if topOfStackIsAmong([nil]) {
            reduce(1, to: "SwiftSLRMain")
			accepted = true
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "Struct")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "Struct")
        }
        
	}
	
	private func state_6() throws {

        
        if topOfStackIsAmong([Optional("struct"), Optional("macro"), Optional("import"), Optional("func"), nil]) {
            reduce(2, to: "TopLevelStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatements", "reduction")
        }
        
	}
	
	private func state_7() throws {

        
        if topOfStackIsAmong([nil, Optional("macro"), Optional("struct"), Optional("func"), Optional("import")]) {
            reduce(1, to: "TopLevelStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("TopLevelStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("TopLevelStatement", "reduction")
        }
        
	}
	
	private func state_8() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_9)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Macro", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Macro", "identifier")
        }
        
	}
	
	private func state_9() throws {

        if topOfStackIsToken("=") {
            shift()
            pushState(state_10)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Macro", input[index].description, "=")
        } else {
            throw ParseError.abruptEnd("Macro", "=")
        }
        
	}
	
	private func state_10() throws {

        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_103)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEHExpression", input[index].description, "<<")
        } else {
            throw ParseError.abruptEnd("CASEHExpression", "<<")
        }
        
	}
	
	private func state_11() throws {

        if topOfStackIsToken("<=") {
            shift()
            pushState(state_29)
            return
        }
        
        if topOfStackIsToken("<") {
            shift()
            pushState(state_95)
            return
        }
        
        if topOfStackIsToken(">=") {
            shift()
            pushState(state_12)
            return
        }
        
        if topOfStackIsToken(">") {
            shift()
            pushState(state_53)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<="), Optional("-"), Optional("@"), Optional(">="), Optional("/"), Optional(";"), Optional("->"), Optional("!="), Optional(">"), Optional("*"), Optional(")"), Optional("."), Optional("+"), Optional("&"), Optional("{"), Optional("=="), Optional("="), Optional("<"), Optional(","), Optional("%")]) {
            reduce(1, to: "CASEDExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "<=")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "<=")
        }
        
	}
	
	private func state_12() throws {

        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_102)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "sizeof")
        } else {
            throw ParseError.abruptEnd("Sizeof", "sizeof")
        }
        
	}
	
	private func state_13() throws {

        
        if topOfStackIsAmong([Optional(";"), Optional("/"), Optional(">="), Optional("-"), Optional(")"), Optional("^"), Optional("="), Optional("{"), Optional("+"), Optional("|"), Optional("!="), Optional("&"), Optional("*"), Optional("->"), Optional("."), Optional("<"), Optional(">"), Optional("@"), Optional("%"), Optional("=="), Optional("<="), Optional(",")]) {
            reduce(1, to: "CASEJExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "reduction")
        }
        
	}
	
	private func state_14() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_15() throws {

        
        if topOfStackIsAmong([Optional("+"), Optional("<="), Optional("&"), Optional("-"), Optional("<"), Optional("^"), Optional("!="), Optional(">="), Optional("{"), Optional("@"), Optional(";"), Optional("=="), Optional("*"), Optional("="), Optional("/"), Optional("|"), Optional("%"), Optional(">"), Optional(")"), Optional(","), Optional("."), Optional("->")]) {
            reduce(1, to: "CASEGExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "reduction")
        }
        
	}
	
	private func state_16() throws {

        if topOfStackIsToken("/") {
            shift()
            pushState(state_33)
            return
        }
        
        if topOfStackIsToken("%") {
            shift()
            pushState(state_17)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_57)
            return
        }
        
        
        if topOfStackIsAmong([Optional("-"), Optional("->"), Optional("+"), Optional(")"), Optional(">"), Optional("!="), Optional("&"), Optional("=="), Optional("<"), Optional("{"), Optional(">="), Optional("%"), Optional("^"), Optional("."), Optional("@"), Optional("*"), Optional("|"), Optional("<="), Optional("="), Optional(","), Optional("/"), Optional(";")]) {
            reduce(1, to: "CASEFExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "reduction")
        }
        
	}
	
	private func state_17() throws {

        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_101)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "CASEJExpression")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "CASEJExpression")
        }
        
	}
	
	private func state_18() throws {

        if topOfStackIsToken("->") {
            shift()
            pushState(state_19)
            return
        }
        
        if topOfStackIsToken(".") {
            shift()
            pushState(state_61)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional(">"), Optional("|"), Optional(")"), Optional(","), Optional("+"), Optional("=="), Optional("!="), Optional("@"), Optional("%"), Optional("^"), Optional("->"), Optional("<="), Optional("{"), Optional("."), Optional("<"), Optional(";"), Optional("&"), Optional(">="), Optional("-"), Optional("="), Optional("*")]) {
            reduce(1, to: "CASEIExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "->")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "->")
        }
        
	}
	
	private func state_19() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_20)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "sizeof")
        } else {
            throw ParseError.abruptEnd("Sizeof", "sizeof")
        }
        
	}
	
	private func state_20() throws {

        
        if topOfStackIsAmong([Optional(";"), Optional("/"), Optional(">="), Optional("-"), Optional(")"), Optional("^"), Optional("="), Optional("{"), Optional("+"), Optional("|"), Optional("!="), Optional("&"), Optional("*"), Optional("->"), Optional("."), Optional("<"), Optional(">"), Optional("@"), Optional("%"), Optional("=="), Optional("<="), Optional(",")]) {
            reduce(3, to: "CASEJExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "reduction")
        }
        
	}
	
	private func state_21() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_22() throws {

        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_99)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "CASECExpression")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "CASECExpression")
        }
        
	}
	
	private func state_23() throws {

        if topOfStackIsToken("&") {
            shift()
            pushState(state_24)
            return
        }
        
        
        if topOfStackIsAmong([Optional("{"), Optional("<"), Optional("*"), Optional("<="), Optional("!="), Optional("@"), Optional("+"), Optional("-"), Optional(">"), Optional(">="), Optional("&"), Optional(")"), Optional("=="), Optional("|"), Optional(";"), Optional("."), Optional("/"), Optional("->"), Optional("="), Optional("%"), Optional(","), Optional("^")]) {
            reduce(1, to: "CASEBExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "&")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "&")
        }
        
	}
	
	private func state_24() throws {

        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_26)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEIExpression", input[index].description, "CASEJExpression")
        } else {
            throw ParseError.abruptEnd("CASEIExpression", "CASEJExpression")
        }
        
	}
	
	private func state_25() throws {

        
        if topOfStackIsAmong([Optional(")"), Optional("@"), Optional("<"), Optional("<="), Optional(","), Optional("{"), Optional("."), Optional("/"), Optional("-"), Optional("+"), Optional("^"), Optional("="), Optional("&"), Optional("*"), Optional("%"), Optional("=="), Optional(">"), Optional("->"), Optional("|"), Optional(">="), Optional(";"), Optional("!=")]) {
            reduce(1, to: "CASEHExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEHExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEHExpression", "reduction")
        }
        
	}
	
	private func state_26() throws {

        if topOfStackIsToken("==") {
            shift()
            pushState(state_27)
            return
        }
        
        if topOfStackIsToken("!=") {
            shift()
            pushState(state_51)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional("*"), Optional("->"), Optional("%"), Optional(","), Optional("="), Optional(">"), Optional(")"), Optional("."), Optional("|"), Optional(">="), Optional("!="), Optional("=="), Optional("^"), Optional("<"), Optional("{"), Optional("<="), Optional(";"), Optional("&"), Optional("+"), Optional("-"), Optional("@")]) {
            reduce(3, to: "CASECExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEDExpression", input[index].description, "!=")
        } else {
            throw ParseError.abruptEnd("CASEDExpression", "!=")
        }
        
	}
	
	private func state_27() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_28)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEDExpression", input[index].description, "CASEEExpression")
        } else {
            throw ParseError.abruptEnd("CASEDExpression", "CASEEExpression")
        }
        
	}
	
	private func state_28() throws {

        if topOfStackIsToken(">") {
            shift()
            pushState(state_53)
            return
        }
        
        if topOfStackIsToken(">=") {
            shift()
            pushState(state_12)
            return
        }
        
        if topOfStackIsToken("<=") {
            shift()
            pushState(state_29)
            return
        }
        
        if topOfStackIsToken("<") {
            shift()
            pushState(state_95)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<="), Optional("-"), Optional("@"), Optional(">="), Optional("/"), Optional(";"), Optional("->"), Optional("!="), Optional(">"), Optional("*"), Optional(")"), Optional("."), Optional("+"), Optional("&"), Optional("{"), Optional("=="), Optional("="), Optional("<"), Optional(","), Optional("%")]) {
            reduce(3, to: "CASEDExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, ">=")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", ">=")
        }
        
	}
	
	private func state_29() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_30)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "CASEJExpression")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "CASEJExpression")
        }
        
	}
	
	private func state_30() throws {

        if topOfStackIsToken("+") {
            shift()
            pushState(state_31)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_55)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<="), Optional(";"), Optional("%"), Optional("->"), Optional("!="), Optional("&"), Optional(">"), Optional("@"), Optional("^"), Optional("<"), Optional("|"), Optional("-"), Optional("+"), Optional(","), Optional(">="), Optional("/"), Optional("=="), Optional("{"), Optional("*"), Optional("."), Optional("="), Optional(")")]) {
            reduce(3, to: "CASEEExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "reduction")
        }
        
	}
	
	private func state_31() throws {

        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_32)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "CASEGExpression")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "CASEGExpression")
        }
        
	}
	
	private func state_32() throws {

        if topOfStackIsToken("/") {
            shift()
            pushState(state_33)
            return
        }
        
        if topOfStackIsToken("%") {
            shift()
            pushState(state_17)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_57)
            return
        }
        
        
        if topOfStackIsAmong([Optional("-"), Optional("->"), Optional("+"), Optional(")"), Optional(">"), Optional("!="), Optional("&"), Optional("=="), Optional("<"), Optional("{"), Optional(">="), Optional("%"), Optional("^"), Optional("."), Optional("@"), Optional("*"), Optional("|"), Optional("<="), Optional("="), Optional(","), Optional("/"), Optional(";")]) {
            reduce(3, to: "CASEFExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "/")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "/")
        }
        
	}
	
	private func state_33() throws {

        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_34)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "string")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "string")
        }
        
	}
	
	private func state_34() throws {

        
        if topOfStackIsAmong([Optional("+"), Optional("<="), Optional("&"), Optional("-"), Optional("<"), Optional("^"), Optional("!="), Optional(">="), Optional("{"), Optional("@"), Optional(";"), Optional("=="), Optional("*"), Optional("="), Optional("/"), Optional("|"), Optional("%"), Optional(">"), Optional(")"), Optional(","), Optional("."), Optional("->")]) {
            reduce(3, to: "CASEGExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "reduction")
        }
        
	}
	
	private func state_35() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_36)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Type", "Type")
        }
        
	}
	
	private func state_36() throws {

        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        if topOfStackIsToken("]") {
            shift()
            pushState(state_47)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "]")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "]")
        }
        
	}
	
	private func state_37() throws {

        
        if topOfStackIsAmong([Optional("{"), Optional("]"), Optional("="), Optional(";"), Optional(","), Optional("->"), Optional("*"), Optional(")")]) {
            reduce(2, to: "Type")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Type", "reduction")
        }
        
	}
	
	private func state_38() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_39)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Type", "Type")
        }
        
	}
	
	private func state_39() throws {

        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        
        if topOfStackIsAmong([Optional("{"), Optional("]"), Optional("="), Optional(";"), Optional(","), Optional("->"), Optional("*"), Optional(")")]) {
            reduce(3, to: "Type")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Type", "reduction")
        }
        
	}
	
	private func state_40() throws {

        if topOfStackIsNonTerminal("Types") {
            pushState(state_42)
            return
        }
        
        if topOfStackIsNonTerminal("Type") {
            pushState(state_41)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(0, to: "Types")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Types", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Types", "reduction")
        }
        
	}
	
	private func state_41() throws {

        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(1, to: "Types")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Types", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Types", "reduction")
        }
        
	}
	
	private func state_42() throws {

        if topOfStackIsToken(",") {
            shift()
            pushState(state_43)
            return
        }
        
        if topOfStackIsToken(")") {
            shift()
            pushState(state_46)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Types", input[index].description, ",")
        } else {
            throw ParseError.abruptEnd("Types", ",")
        }
        
	}
	
	private func state_43() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_44)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Types", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Types", "Type")
        }
        
	}
	
	private func state_44() throws {

        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(3, to: "Types")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "*")
        } else {
            throw ParseError.abruptEnd("Type", "*")
        }
        
	}
	
	private func state_45() throws {

        
        if topOfStackIsAmong([Optional("{"), Optional("]"), Optional("="), Optional(";"), Optional(","), Optional("->"), Optional("*"), Optional(")")]) {
            reduce(1, to: "Type")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Type", "reduction")
        }
        
	}
	
	private func state_46() throws {

        
        if topOfStackIsAmong([Optional("{"), Optional("]"), Optional("="), Optional(";"), Optional(","), Optional("->"), Optional("*"), Optional(")")]) {
            reduce(3, to: "Type")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Type", "reduction")
        }
        
	}
	
	private func state_47() throws {

        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_98)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "CASEEExpression")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "CASEEExpression")
        }
        
	}
	
	private func state_48() throws {

        if topOfStackIsToken("^") {
            shift()
            pushState(state_49)
            return
        }
        
        
        if topOfStackIsAmong([Optional("-"), Optional("=="), Optional("*"), Optional("!="), Optional("."), Optional("&"), Optional("/"), Optional("<="), Optional("{"), Optional("@"), Optional(")"), Optional("|"), Optional("<"), Optional("%"), Optional(","), Optional(";"), Optional(">"), Optional("="), Optional("^"), Optional(">="), Optional("+"), Optional("->")]) {
            reduce(1, to: "Expression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEBExpression", input[index].description, "^")
        } else {
            throw ParseError.abruptEnd("CASEBExpression", "^")
        }
        
	}
	
	private func state_49() throws {

        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_97)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "CASEFExpression")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "CASEFExpression")
        }
        
	}
	
	private func state_50() throws {

        if topOfStackIsToken("==") {
            shift()
            pushState(state_27)
            return
        }
        
        if topOfStackIsToken("!=") {
            shift()
            pushState(state_51)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional("*"), Optional("->"), Optional("%"), Optional(","), Optional("="), Optional(">"), Optional(")"), Optional("."), Optional("|"), Optional(">="), Optional("!="), Optional("=="), Optional("^"), Optional("<"), Optional("{"), Optional("<="), Optional(";"), Optional("&"), Optional("+"), Optional("-"), Optional("@")]) {
            reduce(1, to: "CASECExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "reduction")
        }
        
	}
	
	private func state_51() throws {

        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_52)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "CASEEExpression")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "CASEEExpression")
        }
        
	}
	
	private func state_52() throws {

        if topOfStackIsToken(">") {
            shift()
            pushState(state_53)
            return
        }
        
        if topOfStackIsToken("<") {
            shift()
            pushState(state_95)
            return
        }
        
        if topOfStackIsToken(">=") {
            shift()
            pushState(state_12)
            return
        }
        
        if topOfStackIsToken("<=") {
            shift()
            pushState(state_29)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<="), Optional("-"), Optional("@"), Optional(">="), Optional("/"), Optional(";"), Optional("->"), Optional("!="), Optional(">"), Optional("*"), Optional(")"), Optional("."), Optional("+"), Optional("&"), Optional("{"), Optional("=="), Optional("="), Optional("<"), Optional(","), Optional("%")]) {
            reduce(3, to: "CASEDExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "<")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "<")
        }
        
	}
	
	private func state_53() throws {

        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_54)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "sizeof")
        } else {
            throw ParseError.abruptEnd("Sizeof", "sizeof")
        }
        
	}
	
	private func state_54() throws {

        if topOfStackIsToken("+") {
            shift()
            pushState(state_31)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_55)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<="), Optional(";"), Optional("%"), Optional("->"), Optional("!="), Optional("&"), Optional(">"), Optional("@"), Optional("^"), Optional("<"), Optional("|"), Optional("-"), Optional("+"), Optional(","), Optional(">="), Optional("/"), Optional("=="), Optional("{"), Optional("*"), Optional("."), Optional("="), Optional(")")]) {
            reduce(3, to: "CASEEExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "reduction")
        }
        
	}
	
	private func state_55() throws {

        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_56)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "(")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "(")
        }
        
	}
	
	private func state_56() throws {

        if topOfStackIsToken("*") {
            shift()
            pushState(state_57)
            return
        }
        
        if topOfStackIsToken("%") {
            shift()
            pushState(state_17)
            return
        }
        
        if topOfStackIsToken("/") {
            shift()
            pushState(state_33)
            return
        }
        
        
        if topOfStackIsAmong([Optional("-"), Optional("->"), Optional("+"), Optional(")"), Optional(">"), Optional("!="), Optional("&"), Optional("=="), Optional("<"), Optional("{"), Optional(">="), Optional("%"), Optional("^"), Optional("."), Optional("@"), Optional("*"), Optional("|"), Optional("<="), Optional("="), Optional(","), Optional("/"), Optional(";")]) {
            reduce(3, to: "CASEFExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "reduction")
        }
        
	}
	
	private func state_57() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_58)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "[")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "[")
        }
        
	}
	
	private func state_58() throws {

        
        if topOfStackIsAmong([Optional("+"), Optional("<="), Optional("&"), Optional("-"), Optional("<"), Optional("^"), Optional("!="), Optional(">="), Optional("{"), Optional("@"), Optional(";"), Optional("=="), Optional("*"), Optional("="), Optional("/"), Optional("|"), Optional("%"), Optional(">"), Optional(")"), Optional(","), Optional("."), Optional("->")]) {
            reduce(3, to: "CASEGExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "reduction")
        }
        
	}
	
	private func state_59() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_60)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "integer")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "integer")
        }
        
	}
	
	private func state_60() throws {

        if topOfStackIsToken(".") {
            shift()
            pushState(state_61)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_19)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional(">"), Optional("|"), Optional(")"), Optional(","), Optional("+"), Optional("=="), Optional("!="), Optional("@"), Optional("%"), Optional("^"), Optional("->"), Optional("<="), Optional("{"), Optional("."), Optional("<"), Optional(";"), Optional("&"), Optional(">="), Optional("-"), Optional("="), Optional("*")]) {
            reduce(2, to: "CASEIExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, ".")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", ".")
        }
        
	}
	
	private func state_61() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_62)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "[")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "[")
        }
        
	}
	
	private func state_62() throws {

        
        if topOfStackIsAmong([Optional(";"), Optional("/"), Optional(">="), Optional("-"), Optional(")"), Optional("^"), Optional("="), Optional("{"), Optional("+"), Optional("|"), Optional("!="), Optional("&"), Optional("*"), Optional("->"), Optional("."), Optional("<"), Optional(">"), Optional("@"), Optional("%"), Optional("=="), Optional("<="), Optional(",")]) {
            reduce(3, to: "CASEJExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "reduction")
        }
        
	}
	
	private func state_63() throws {

        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_65)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "CASEGExpression")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "CASEGExpression")
        }
        
	}
	
	private func state_64() throws {

        if topOfStackIsToken("-") {
            shift()
            pushState(state_55)
            return
        }
        
        if topOfStackIsToken("+") {
            shift()
            pushState(state_31)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<="), Optional(";"), Optional("%"), Optional("->"), Optional("!="), Optional("&"), Optional(">"), Optional("@"), Optional("^"), Optional("<"), Optional("|"), Optional("-"), Optional("+"), Optional(","), Optional(">="), Optional("/"), Optional("=="), Optional("{"), Optional("*"), Optional("."), Optional("="), Optional(")")]) {
            reduce(1, to: "CASEEExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "-")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "-")
        }
        
	}
	
	private func state_65() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(2, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_66() throws {

        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_67)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEIExpression", input[index].description, "-")
        } else {
            throw ParseError.abruptEnd("CASEIExpression", "-")
        }
        
	}
	
	private func state_67() throws {

        if topOfStackIsToken("^") {
            shift()
            pushState(state_49)
            return
        }
        
        
        if topOfStackIsAmong([Optional("-"), Optional("=="), Optional("*"), Optional("!="), Optional("."), Optional("&"), Optional("/"), Optional("<="), Optional("{"), Optional("@"), Optional(")"), Optional("|"), Optional("<"), Optional("%"), Optional(","), Optional(";"), Optional(">"), Optional("="), Optional("^"), Optional(">="), Optional("+"), Optional("->")]) {
            reduce(3, to: "Expression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Expression", "reduction")
        }
        
	}
	
	private func state_68() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_69() throws {

        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_70)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, "CASEJExpression")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", "CASEJExpression")
        }
        
	}
	
	private func state_70() throws {

        
        if topOfStackIsAmong([Optional(")"), Optional("@"), Optional("<"), Optional("<="), Optional(","), Optional("{"), Optional("."), Optional("/"), Optional("-"), Optional("+"), Optional("^"), Optional("="), Optional("&"), Optional("*"), Optional("%"), Optional("=="), Optional(">"), Optional("->"), Optional("|"), Optional(">="), Optional(";"), Optional("!=")]) {
            reduce(2, to: "CASEHExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEHExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEHExpression", "reduction")
        }
        
	}
	
	private func state_71() throws {

        if topOfStackIsToken("(") {
            shift()
            pushState(state_72)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_72() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_73)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Arguments") {
            pushState(state_75)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Argument") {
            pushState(state_74)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_91)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(0, to: "Arguments")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "[")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "[")
        }
        
	}
	
	private func state_73() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(1, to: "Argument")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_74() throws {

        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(1, to: "Arguments")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Arguments", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Arguments", "reduction")
        }
        
	}
	
	private func state_75() throws {

        if topOfStackIsToken(",") {
            shift()
            pushState(state_76)
            return
        }
        
        if topOfStackIsToken(")") {
            shift()
            pushState(state_94)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, ")")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", ")")
        }
        
	}
	
	private func state_76() throws {

        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_73)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("Argument") {
            pushState(state_77)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_91)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEIExpression", input[index].description, "-")
        } else {
            throw ParseError.abruptEnd("CASEIExpression", "-")
        }
        
	}
	
	private func state_77() throws {

        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(3, to: "Arguments")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Arguments", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Arguments", "reduction")
        }
        
	}
	
	private func state_78() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_79)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "char")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "char")
        }
        
	}
	
	private func state_79() throws {

        if topOfStackIsToken(".") {
            shift()
            pushState(state_61)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_19)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional(">"), Optional("|"), Optional(")"), Optional(","), Optional("+"), Optional("=="), Optional("!="), Optional("@"), Optional("%"), Optional("^"), Optional("->"), Optional("<="), Optional("{"), Optional("."), Optional("<"), Optional(";"), Optional("&"), Optional(">="), Optional("-"), Optional("="), Optional("*")]) {
            reduce(2, to: "CASEIExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEIExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEIExpression", "reduction")
        }
        
	}
	
	private func state_80() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_81() throws {

        if topOfStackIsToken("(") {
            shift()
            pushState(state_82)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "(")
        } else {
            throw ParseError.abruptEnd("Sizeof", "(")
        }
        
	}
	
	private func state_82() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_83)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Sizeof", "Type")
        }
        
	}
	
	private func state_83() throws {

        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken(")") {
            shift()
            pushState(state_84)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, ")")
        } else {
            throw ParseError.abruptEnd("Sizeof", ")")
        }
        
	}
	
	private func state_84() throws {

        
        if topOfStackIsAmong([Optional(">="), Optional("="), Optional(";"), Optional("+"), Optional("/"), Optional(")"), Optional("<="), Optional(","), Optional("^"), Optional("&"), Optional("<"), Optional("%"), Optional("=="), Optional("|"), Optional("->"), Optional("."), Optional("-"), Optional("!="), Optional("*"), Optional("@"), Optional(">"), Optional("{")]) {
            reduce(4, to: "Sizeof")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Sizeof", "reduction")
        }
        
	}
	
	private func state_85() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_86)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEBExpression", input[index].description, "CASEBExpression")
        } else {
            throw ParseError.abruptEnd("CASEBExpression", "CASEBExpression")
        }
        
	}
	
	private func state_86() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(2, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_87() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_88)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "*")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "*")
        }
        
	}
	
	private func state_88() throws {

        if topOfStackIsToken("->") {
            shift()
            pushState(state_19)
            return
        }
        
        if topOfStackIsToken(".") {
            shift()
            pushState(state_61)
            return
        }
        
        
        if topOfStackIsAmong([Optional("/"), Optional(">"), Optional("|"), Optional(")"), Optional(","), Optional("+"), Optional("=="), Optional("!="), Optional("@"), Optional("%"), Optional("^"), Optional("->"), Optional("<="), Optional("{"), Optional("."), Optional("<"), Optional(";"), Optional("&"), Optional(">="), Optional("-"), Optional("="), Optional("*")]) {
            reduce(2, to: "CASEIExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEJExpression", input[index].description, ".")
        } else {
            throw ParseError.abruptEnd("CASEJExpression", ".")
        }
        
	}
	
	private func state_89() throws {

        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_90)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "identifier")
        }
        
	}
	
	private func state_90() throws {

        
        if topOfStackIsAmong([Optional(")"), Optional("@"), Optional("<"), Optional("<="), Optional(","), Optional("{"), Optional("."), Optional("/"), Optional("-"), Optional("+"), Optional("^"), Optional("="), Optional("&"), Optional("*"), Optional("%"), Optional("=="), Optional(">"), Optional("->"), Optional("|"), Optional(">="), Optional(";"), Optional("!=")]) {
            reduce(2, to: "CASEHExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEHExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEHExpression", "reduction")
        }
        
	}
	
	private func state_91() throws {

        if topOfStackIsToken("(") {
            shift()
            pushState(state_72)
            return
        }
        
        if topOfStackIsToken(":") {
            shift()
            pushState(state_92)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(1, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_92() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_93)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "&")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "&")
        }
        
	}
	
	private func state_93() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(3, to: "Argument")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_94() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(4, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_95() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_96)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEHExpression", input[index].description, "CASEIExpression")
        } else {
            throw ParseError.abruptEnd("CASEHExpression", "CASEIExpression")
        }
        
	}
	
	private func state_96() throws {

        if topOfStackIsToken("-") {
            shift()
            pushState(state_55)
            return
        }
        
        if topOfStackIsToken("+") {
            shift()
            pushState(state_31)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<="), Optional(";"), Optional("%"), Optional("->"), Optional("!="), Optional("&"), Optional(">"), Optional("@"), Optional("^"), Optional("<"), Optional("|"), Optional("-"), Optional("+"), Optional(","), Optional(">="), Optional("/"), Optional("=="), Optional("{"), Optional("*"), Optional("."), Optional("="), Optional(")")]) {
            reduce(3, to: "CASEEExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "reduction")
        }
        
	}
	
	private func state_97() throws {

        if topOfStackIsToken("&") {
            shift()
            pushState(state_24)
            return
        }
        
        
        if topOfStackIsAmong([Optional("{"), Optional("<"), Optional("*"), Optional("<="), Optional("!="), Optional("@"), Optional("+"), Optional("-"), Optional(">"), Optional(">="), Optional("&"), Optional(")"), Optional("=="), Optional("|"), Optional(";"), Optional("."), Optional("/"), Optional("->"), Optional("="), Optional("%"), Optional(","), Optional("^")]) {
            reduce(3, to: "CASEBExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "&")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "&")
        }
        
	}
	
	private func state_98() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(4, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_99() throws {

        if topOfStackIsToken(")") {
            shift()
            pushState(state_100)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, ")")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", ")")
        }
        
	}
	
	private func state_100() throws {

        
        if topOfStackIsAmong([Optional("|"), Optional("^"), Optional("<"), Optional("="), Optional("&"), Optional("!="), Optional("/"), Optional("-"), Optional("*"), Optional("@"), Optional("+"), Optional("=="), Optional("<="), Optional("->"), Optional(","), Optional("{"), Optional(")"), Optional("%"), Optional(";"), Optional(">"), Optional("."), Optional(">=")]) {
            reduce(3, to: "CASEKExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "reduction")
        }
        
	}
	
	private func state_101() throws {

        
        if topOfStackIsAmong([Optional("+"), Optional("<="), Optional("&"), Optional("-"), Optional("<"), Optional("^"), Optional("!="), Optional(">="), Optional("{"), Optional("@"), Optional(";"), Optional("=="), Optional("*"), Optional("="), Optional("/"), Optional("|"), Optional("%"), Optional(">"), Optional(")"), Optional(","), Optional("."), Optional("->")]) {
            reduce(3, to: "CASEGExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "reduction")
        }
        
	}
	
	private func state_102() throws {

        if topOfStackIsToken("-") {
            shift()
            pushState(state_55)
            return
        }
        
        if topOfStackIsToken("+") {
            shift()
            pushState(state_31)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<="), Optional(";"), Optional("%"), Optional("->"), Optional("!="), Optional("&"), Optional(">"), Optional("@"), Optional("^"), Optional("<"), Optional("|"), Optional("-"), Optional("+"), Optional(","), Optional(">="), Optional("/"), Optional("=="), Optional("{"), Optional("*"), Optional("."), Optional("="), Optional(")")]) {
            reduce(3, to: "CASEEExpression")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "reduction")
        }
        
	}
	
	private func state_103() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_104)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Macro", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Macro", ";")
        }
        
	}
	
	private func state_104() throws {

        
        if topOfStackIsAmong([Optional("macro"), nil, Optional("import"), Optional("struct"), Optional("func")]) {
            reduce(5, to: "Macro")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Macro", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Macro", "reduction")
        }
        
	}
	
	private func state_105() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_106)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Struct", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Struct", "identifier")
        }
        
	}
	
	private func state_106() throws {

        if topOfStackIsToken("{") {
            shift()
            pushState(state_107)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Struct", input[index].description, "{")
        } else {
            throw ParseError.abruptEnd("Struct", "{")
        }
        
	}
	
	private func state_107() throws {

        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_123)
            return
        }
        
        if topOfStackIsNonTerminal("StructBodyStatements") {
            pushState(state_108)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        
        if topOfStackIsAmong([Optional("}"), Optional("var")]) {
            reduce(0, to: "StructBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("StructBodyStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("StructBodyStatements", "reduction")
        }
        
	}
	
	private func state_108() throws {

        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_109)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_110)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "var")
        } else {
            throw ParseError.abruptEnd("Declaration", "var")
        }
        
	}
	
	private func state_109() throws {

        
        if topOfStackIsAmong([Optional("}"), Optional("var")]) {
            reduce(2, to: "StructBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("StructBodyStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("StructBodyStatements", "reduction")
        }
        
	}
	
	private func state_110() throws {

        
        if topOfStackIsAmong([Optional("macro"), Optional("struct"), nil, Optional("import"), Optional("func")]) {
            reduce(5, to: "Struct")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Struct", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Struct", "reduction")
        }
        
	}
	
	private func state_111() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_112)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Declaration", "identifier")
        }
        
	}
	
	private func state_112() throws {

        if topOfStackIsToken("=") {
            shift()
            pushState(state_120)
            return
        }
        
        if topOfStackIsToken(":") {
            shift()
            pushState(state_113)
            return
        }
        
        if topOfStackIsToken(";") {
            shift()
            pushState(state_119)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Declaration", ";")
        }
        
	}
	
	private func state_113() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_114)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Type", "Type")
        }
        
	}
	
	private func state_114() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_115)
            return
        }
        
        if topOfStackIsToken("=") {
            shift()
            pushState(state_116)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "=")
        } else {
            throw ParseError.abruptEnd("Declaration", "=")
        }
        
	}
	
	private func state_115() throws {

        
        if topOfStackIsAmong([Optional("integer"), Optional("char"), Optional(">>"), Optional("}"), Optional("string"), Optional("while"), Optional("<<"), Optional("identifier"), Optional("!"), Optional("("), Optional("*"), Optional("["), Optional("sizeof"), Optional("return"), Optional("if"), Optional("-"), Optional("~"), Optional("var"), Optional("&"), Optional("call")]) {
            reduce(5, to: "Declaration")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Declaration", "reduction")
        }
        
	}
	
	private func state_116() throws {

        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_117)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEDExpression", input[index].description, "CASEDExpression")
        } else {
            throw ParseError.abruptEnd("CASEDExpression", "CASEDExpression")
        }
        
	}
	
	private func state_117() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_118)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_118() throws {

        
        if topOfStackIsAmong([Optional("integer"), Optional("char"), Optional(">>"), Optional("}"), Optional("string"), Optional("while"), Optional("<<"), Optional("identifier"), Optional("!"), Optional("("), Optional("*"), Optional("["), Optional("sizeof"), Optional("return"), Optional("if"), Optional("-"), Optional("~"), Optional("var"), Optional("&"), Optional("call")]) {
            reduce(7, to: "Declaration")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Declaration", "reduction")
        }
        
	}
	
	private func state_119() throws {

        
        if topOfStackIsAmong([Optional("integer"), Optional("char"), Optional(">>"), Optional("}"), Optional("string"), Optional("while"), Optional("<<"), Optional("identifier"), Optional("!"), Optional("("), Optional("*"), Optional("["), Optional("sizeof"), Optional("return"), Optional("if"), Optional("-"), Optional("~"), Optional("var"), Optional("&"), Optional("call")]) {
            reduce(3, to: "Declaration")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Declaration", "reduction")
        }
        
	}
	
	private func state_120() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_121)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEDExpression", input[index].description, "CASEDExpression")
        } else {
            throw ParseError.abruptEnd("CASEDExpression", "CASEDExpression")
        }
        
	}
	
	private func state_121() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_122)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Expression", input[index].description, "|")
        } else {
            throw ParseError.abruptEnd("Expression", "|")
        }
        
	}
	
	private func state_122() throws {

        
        if topOfStackIsAmong([Optional("integer"), Optional("char"), Optional(">>"), Optional("}"), Optional("string"), Optional("while"), Optional("<<"), Optional("identifier"), Optional("!"), Optional("("), Optional("*"), Optional("["), Optional("sizeof"), Optional("return"), Optional("if"), Optional("-"), Optional("~"), Optional("var"), Optional("&"), Optional("call")]) {
            reduce(5, to: "Declaration")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Declaration", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Declaration", "reduction")
        }
        
	}
	
	private func state_123() throws {

        
        if topOfStackIsAmong([Optional("}"), Optional("var")]) {
            reduce(1, to: "StructBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("StructBodyStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("StructBodyStatements", "reduction")
        }
        
	}
	
	private func state_124() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_125)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Import", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Import", "identifier")
        }
        
	}
	
	private func state_125() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_126)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Import", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Import", ";")
        }
        
	}
	
	private func state_126() throws {

        
        if topOfStackIsAmong([Optional("struct"), Optional("import"), Optional("macro"), nil, Optional("func")]) {
            reduce(3, to: "Import")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Import", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Import", "reduction")
        }
        
	}
	
	private func state_127() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_128)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Function", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Function", "identifier")
        }
        
	}
	
	private func state_128() throws {

        if topOfStackIsToken("(") {
            shift()
            pushState(state_129)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Function", input[index].description, "(")
        } else {
            throw ParseError.abruptEnd("Function", "(")
        }
        
	}
	
	private func state_129() throws {

        if topOfStackIsNonTerminal("Parameters") {
            pushState(state_130)
            return
        }
        
        if topOfStackIsNonTerminal("Parameter") {
            pushState(state_197)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_133)
            return
        }
        
        
        if topOfStackIsAmong([Optional(","), Optional(")")]) {
            reduce(0, to: "Parameters")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameters", input[index].description, "Parameter")
        } else {
            throw ParseError.abruptEnd("Parameters", "Parameter")
        }
        
	}
	
	private func state_130() throws {

        if topOfStackIsToken(",") {
            shift()
            pushState(state_131)
            return
        }
        
        if topOfStackIsToken(")") {
            shift()
            pushState(state_136)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameters", input[index].description, ",")
        } else {
            throw ParseError.abruptEnd("Parameters", ",")
        }
        
	}
	
	private func state_131() throws {

        if topOfStackIsNonTerminal("Parameter") {
            pushState(state_132)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_133)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameter", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Parameter", "identifier")
        }
        
	}
	
	private func state_132() throws {

        
        if topOfStackIsAmong([Optional(","), Optional(")")]) {
            reduce(3, to: "Parameters")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameters", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Parameters", "reduction")
        }
        
	}
	
	private func state_133() throws {

        if topOfStackIsToken(":") {
            shift()
            pushState(state_134)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameter", input[index].description, ":")
        } else {
            throw ParseError.abruptEnd("Parameter", ":")
        }
        
	}
	
	private func state_134() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_135)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Type", "identifier")
        }
        
	}
	
	private func state_135() throws {

        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(3, to: "Parameter")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "*")
        } else {
            throw ParseError.abruptEnd("Type", "*")
        }
        
	}
	
	private func state_136() throws {

        if topOfStackIsToken("{") {
            shift()
            pushState(state_194)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_137)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Function", input[index].description, "{")
        } else {
            throw ParseError.abruptEnd("Function", "{")
        }
        
	}
	
	private func state_137() throws {

        if topOfStackIsNonTerminal("Type") {
            pushState(state_138)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_40)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_45)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "Type")
        } else {
            throw ParseError.abruptEnd("Type", "Type")
        }
        
	}
	
	private func state_138() throws {

        if topOfStackIsToken("{") {
            shift()
            pushState(state_139)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_37)
            return
        }
        
        if topOfStackIsToken("->") {
            shift()
            pushState(state_38)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Type", input[index].description, "*")
        } else {
            throw ParseError.abruptEnd("Type", "*")
        }
        
	}
	
	private func state_139() throws {

        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatements") {
            pushState(state_146)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_172)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(0, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "Declaration")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "Declaration")
        }
        
	}
	
	private func state_140() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_141() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_142() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_143() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_144() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_145() throws {

        
        if topOfStackIsAmong([Optional("while"), Optional("}"), Optional("char"), Optional("["), Optional("if"), Optional("return"), Optional(">>"), Optional("*"), Optional("string"), Optional("identifier"), Optional("<<"), Optional("var"), Optional("&"), Optional("-"), Optional("call"), Optional("~"), Optional("integer"), Optional("("), Optional("sizeof"), Optional("!")]) {
            reduce(1, to: "FunctionBodyStatement")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "reduction")
        }
        
	}
	
	private func state_146() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_164)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_193)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Sizeof", input[index].description, "sizeof")
        } else {
            throw ParseError.abruptEnd("Sizeof", "sizeof")
        }
        
	}
	
	private func state_147() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if topOfStackIsToken("@") {
            shift()
            pushState(state_151)
            return
        }
        
        if topOfStackIsToken("=") {
            shift()
            pushState(state_148)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, "=")
        } else {
            throw ParseError.abruptEnd("Assignment", "=")
        }
        
	}
	
	private func state_148() throws {

        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_149)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "CASEEExpression")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "CASEEExpression")
        }
        
	}
	
	private func state_149() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if topOfStackIsToken(";") {
            shift()
            pushState(state_150)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Assignment", ";")
        }
        
	}
	
	private func state_150() throws {

        
        if topOfStackIsAmong([Optional("call"), Optional("*"), Optional("("), Optional("["), Optional("~"), Optional(">>"), Optional("-"), Optional("!"), Optional("return"), Optional("sizeof"), Optional("<<"), Optional("identifier"), Optional("&"), Optional("integer"), Optional("string"), Optional("}"), Optional("while"), Optional("char"), Optional("if"), Optional("var")]) {
            reduce(4, to: "Assignment")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Assignment", "reduction")
        }
        
	}
	
	private func state_151() throws {

        if topOfStackIsNonTerminal("SugarOperator") {
            pushState(state_152)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_160)
            return
        }
        
        if topOfStackIsToken("/") {
            shift()
            pushState(state_159)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_162)
            return
        }
        
        if topOfStackIsToken("^") {
            shift()
            pushState(state_163)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_156)
            return
        }
        
        if topOfStackIsToken("%") {
            shift()
            pushState(state_161)
            return
        }
        
        if topOfStackIsToken("+") {
            shift()
            pushState(state_158)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_157)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "&")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "&")
        }
        
	}
	
	private func state_152() throws {

        if topOfStackIsToken("=") {
            shift()
            pushState(state_153)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, "=")
        } else {
            throw ParseError.abruptEnd("Assignment", "=")
        }
        
	}
	
	private func state_153() throws {

        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_154)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEEExpression", input[index].description, "CASEEExpression")
        } else {
            throw ParseError.abruptEnd("CASEEExpression", "CASEEExpression")
        }
        
	}
	
	private func state_154() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_155)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Assignment", ";")
        }
        
	}
	
	private func state_155() throws {

        
        if topOfStackIsAmong([Optional("call"), Optional("*"), Optional("("), Optional("["), Optional("~"), Optional(">>"), Optional("-"), Optional("!"), Optional("return"), Optional("sizeof"), Optional("<<"), Optional("identifier"), Optional("&"), Optional("integer"), Optional("string"), Optional("}"), Optional("while"), Optional("char"), Optional("if"), Optional("var")]) {
            reduce(6, to: "Assignment")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Assignment", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Assignment", "reduction")
        }
        
	}
	
	private func state_156() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_157() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_158() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_159() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_160() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_161() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_162() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_163() throws {

        
        if topOfStackIsAmong([Optional("=")]) {
            reduce(1, to: "SugarOperator")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("SugarOperator", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("SugarOperator", "reduction")
        }
        
	}
	
	private func state_164() throws {

        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(2, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatements", "reduction")
        }
        
	}
	
	private func state_165() throws {

        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_166)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken(";") {
            shift()
            pushState(state_168)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Return", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Return", ";")
        }
        
	}
	
	private func state_166() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_167)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Return", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Return", ";")
        }
        
	}
	
	private func state_167() throws {

        
        if topOfStackIsAmong([Optional("if"), Optional("!"), Optional("return"), Optional("<<"), Optional("char"), Optional("sizeof"), Optional("var"), Optional("string"), Optional(">>"), Optional("while"), Optional("identifier"), Optional("}"), Optional("*"), Optional("call"), Optional("-"), Optional("~"), Optional("integer"), Optional("("), Optional("["), Optional("&")]) {
            reduce(3, to: "Return")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Return", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Return", "reduction")
        }
        
	}
	
	private func state_168() throws {

        
        if topOfStackIsAmong([Optional("if"), Optional("!"), Optional("return"), Optional("<<"), Optional("char"), Optional("sizeof"), Optional("var"), Optional("string"), Optional(">>"), Optional("while"), Optional("identifier"), Optional("}"), Optional("*"), Optional("call"), Optional("-"), Optional("~"), Optional("integer"), Optional("("), Optional("["), Optional("&")]) {
            reduce(2, to: "Return")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Return", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Return", "reduction")
        }
        
	}
	
	private func state_169() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_170)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEGExpression", input[index].description, "CASEGExpression")
        } else {
            throw ParseError.abruptEnd("CASEGExpression", "CASEGExpression")
        }
        
	}
	
	private func state_170() throws {

        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if topOfStackIsToken("{") {
            shift()
            pushState(state_171)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("If", input[index].description, "{")
        } else {
            throw ParseError.abruptEnd("If", "{")
        }
        
	}
	
	private func state_171() throws {

        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatements") {
            pushState(state_173)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_172)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(0, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "Declaration")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "Declaration")
        }
        
	}
	
	private func state_172() throws {

        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(1, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatements", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatements", "reduction")
        }
        
	}
	
	private func state_173() throws {

        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_164)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_180)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatement", input[index].description, "Declaration")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatement", "Declaration")
        }
        
	}
	
	private func state_174() throws {

        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_175)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, "identifier")
        } else {
            throw ParseError.abruptEnd("Call", "identifier")
        }
        
	}
	
	private func state_175() throws {

        if topOfStackIsToken("(") {
            shift()
            pushState(state_176)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, "(")
        } else {
            throw ParseError.abruptEnd("Call", "(")
        }
        
	}
	
	private func state_176() throws {

        if topOfStackIsNonTerminal("Expression") {
            pushState(state_73)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("Argument") {
            pushState(state_74)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Arguments") {
            pushState(state_177)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_91)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        
        if topOfStackIsAmong([Optional(")"), Optional(",")]) {
            reduce(0, to: "Arguments")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "CASEDExpression")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "CASEDExpression")
        }
        
	}
	
	private func state_177() throws {

        if topOfStackIsToken(",") {
            shift()
            pushState(state_76)
            return
        }
        
        if topOfStackIsToken(")") {
            shift()
            pushState(state_178)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, ")")
        } else {
            throw ParseError.abruptEnd("Call", ")")
        }
        
	}
	
	private func state_178() throws {

        if topOfStackIsToken(";") {
            shift()
            pushState(state_179)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, ";")
        } else {
            throw ParseError.abruptEnd("Call", ";")
        }
        
	}
	
	private func state_179() throws {

        
        if topOfStackIsAmong([Optional("}"), Optional("while"), Optional("return"), Optional("var"), Optional("if"), Optional("char"), Optional("*"), Optional("string"), Optional("<<"), Optional("identifier"), Optional("integer"), Optional("!"), Optional(">>"), Optional("~"), Optional("&"), Optional("("), Optional("["), Optional("-"), Optional("call"), Optional("sizeof")]) {
            reduce(6, to: "Call")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Call", "reduction")
        }
        
	}
	
	private func state_180() throws {

        if topOfStackIsToken("else") {
            shift()
            pushState(state_181)
            return
        }
        
        
        if topOfStackIsAmong([Optional("["), Optional("sizeof"), Optional("return"), Optional("*"), Optional("char"), Optional("~"), Optional("!"), Optional("identifier"), Optional("call"), Optional("integer"), Optional("if"), Optional("&"), Optional("var"), Optional("-"), Optional("("), Optional("<<"), Optional(">>"), Optional("string"), Optional("while"), Optional("}")]) {
            reduce(5, to: "If")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("If", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("If", "reduction")
        }
        
	}
	
	private func state_181() throws {

        if topOfStackIsNonTerminal("Else") {
            pushState(state_182)
            return
        }
        
        if topOfStackIsNonTerminal("UnconditionalElse") {
            pushState(state_183)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_184)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("{") {
            shift()
            pushState(state_185)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("If", input[index].description, "if")
        } else {
            throw ParseError.abruptEnd("If", "if")
        }
        
	}
	
	private func state_182() throws {

        
        if topOfStackIsAmong([Optional("["), Optional("sizeof"), Optional("return"), Optional("*"), Optional("char"), Optional("~"), Optional("!"), Optional("identifier"), Optional("call"), Optional("integer"), Optional("if"), Optional("&"), Optional("var"), Optional("-"), Optional("("), Optional("<<"), Optional(">>"), Optional("string"), Optional("while"), Optional("}")]) {
            reduce(7, to: "If")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("If", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("If", "reduction")
        }
        
	}
	
	private func state_183() throws {

        
        if topOfStackIsAmong([Optional("*"), Optional("return"), Optional("~"), Optional("if"), Optional("var"), Optional("char"), Optional("<<"), Optional("("), Optional("string"), Optional("sizeof"), Optional("["), Optional("integer"), Optional("identifier"), Optional("while"), Optional("}"), Optional("!"), Optional("&"), Optional("-"), Optional(">>"), Optional("call")]) {
            reduce(1, to: "Else")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Else", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Else", "reduction")
        }
        
	}
	
	private func state_184() throws {

        
        if topOfStackIsAmong([Optional("*"), Optional("return"), Optional("~"), Optional("if"), Optional("var"), Optional("char"), Optional("<<"), Optional("("), Optional("string"), Optional("sizeof"), Optional("["), Optional("integer"), Optional("identifier"), Optional("while"), Optional("}"), Optional("!"), Optional("&"), Optional("-"), Optional(">>"), Optional("call")]) {
            reduce(1, to: "Else")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Else", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Else", "reduction")
        }
        
	}
	
	private func state_185() throws {

        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatements") {
            pushState(state_186)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_172)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(0, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASECExpression", input[index].description, "CASECExpression")
        } else {
            throw ParseError.abruptEnd("CASECExpression", "CASECExpression")
        }
        
	}
	
	private func state_186() throws {

        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_164)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_192)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("FunctionBodyStatements", input[index].description, "FunctionBodyStatement")
        } else {
            throw ParseError.abruptEnd("FunctionBodyStatements", "FunctionBodyStatement")
        }
        
	}
	
	private func state_187() throws {

        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_188)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "Sizeof")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "Sizeof")
        }
        
	}
	
	private func state_188() throws {

        if topOfStackIsToken("{") {
            shift()
            pushState(state_189)
            return
        }
        
        if topOfStackIsToken("|") {
            shift()
            pushState(state_66)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("While", input[index].description, "{")
        } else {
            throw ParseError.abruptEnd("While", "{")
        }
        
	}
	
	private func state_189() throws {

        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_172)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatements") {
            pushState(state_190)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(0, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEFExpression", input[index].description, "CASEFExpression")
        } else {
            throw ParseError.abruptEnd("CASEFExpression", "CASEFExpression")
        }
        
	}
	
	private func state_190() throws {

        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_164)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_191)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEBExpression", input[index].description, "CASEBExpression")
        } else {
            throw ParseError.abruptEnd("CASEBExpression", "CASEBExpression")
        }
        
	}
	
	private func state_191() throws {

        
        if topOfStackIsAmong([Optional("integer"), Optional("return"), Optional("identifier"), Optional("*"), Optional("var"), Optional("-"), Optional("sizeof"), Optional("char"), Optional("}"), Optional(">>"), Optional("("), Optional("call"), Optional("string"), Optional("&"), Optional("<<"), Optional("!"), Optional("if"), Optional("["), Optional("~"), Optional("while")]) {
            reduce(5, to: "While")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("While", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("While", "reduction")
        }
        
	}
	
	private func state_192() throws {

        
        if topOfStackIsAmong([Optional("~"), Optional("}"), Optional("("), Optional("char"), Optional("<<"), Optional(">>"), Optional("string"), Optional("identifier"), Optional("return"), Optional("integer"), Optional("if"), Optional("while"), Optional("!"), Optional("-"), Optional("*"), Optional("sizeof"), Optional("["), Optional("call"), Optional("var"), Optional("&")]) {
            reduce(3, to: "UnconditionalElse")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("UnconditionalElse", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("UnconditionalElse", "reduction")
        }
        
	}
	
	private func state_193() throws {

        
        if topOfStackIsAmong([Optional("func"), Optional("import"), nil, Optional("macro"), Optional("struct")]) {
            reduce(10, to: "Function")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Function", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Function", "reduction")
        }
        
	}
	
	private func state_194() throws {

        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_172)
            return
        }
        
        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatements") {
            pushState(state_195)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        
        if topOfStackIsAmong([Optional("<<"), Optional("string"), Optional("-"), Optional("return"), Optional("integer"), Optional("~"), Optional("if"), Optional("call"), Optional("var"), Optional("&"), Optional("}"), Optional("while"), Optional("!"), Optional("identifier"), Optional("char"), Optional("("), Optional(">>"), Optional("sizeof"), Optional("["), Optional("*")]) {
            reduce(0, to: "FunctionBodyStatements")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("CASEKExpression", input[index].description, "(")
        } else {
            throw ParseError.abruptEnd("CASEKExpression", "(")
        }
        
	}
	
	private func state_195() throws {

        if topOfStackIsNonTerminal("CASEHExpression") {
            pushState(state_15)
            return
        }
        
        if topOfStackIsNonTerminal("Return") {
            pushState(state_142)
            return
        }
        
        if topOfStackIsNonTerminal("CASEEExpression") {
            pushState(state_11)
            return
        }
        
        if topOfStackIsNonTerminal("If") {
            pushState(state_141)
            return
        }
        
        if topOfStackIsNonTerminal("CASEJExpression") {
            pushState(state_18)
            return
        }
        
        if topOfStackIsNonTerminal("CASEFExpression") {
            pushState(state_64)
            return
        }
        
        if topOfStackIsNonTerminal("While") {
            pushState(state_140)
            return
        }
        
        if topOfStackIsNonTerminal("CASEIExpression") {
            pushState(state_25)
            return
        }
        
        if topOfStackIsNonTerminal("Sizeof") {
            pushState(state_14)
            return
        }
        
        if topOfStackIsNonTerminal("CASECExpression") {
            pushState(state_23)
            return
        }
        
        if topOfStackIsNonTerminal("FunctionBodyStatement") {
            pushState(state_164)
            return
        }
        
        if topOfStackIsNonTerminal("CASEKExpression") {
            pushState(state_13)
            return
        }
        
        if topOfStackIsNonTerminal("Declaration") {
            pushState(state_144)
            return
        }
        
        if topOfStackIsNonTerminal("CASEDExpression") {
            pushState(state_50)
            return
        }
        
        if topOfStackIsNonTerminal("Expression") {
            pushState(state_147)
            return
        }
        
        if topOfStackIsNonTerminal("Assignment") {
            pushState(state_143)
            return
        }
        
        if topOfStackIsNonTerminal("CASEBExpression") {
            pushState(state_48)
            return
        }
        
        if topOfStackIsNonTerminal("Call") {
            pushState(state_145)
            return
        }
        
        if topOfStackIsNonTerminal("CASEGExpression") {
            pushState(state_16)
            return
        }
        
        if topOfStackIsToken("*") {
            shift()
            pushState(state_63)
            return
        }
        
        if topOfStackIsToken("call") {
            shift()
            pushState(state_174)
            return
        }
        
        if topOfStackIsToken(">>") {
            shift()
            pushState(state_89)
            return
        }
        
        if topOfStackIsToken("while") {
            shift()
            pushState(state_187)
            return
        }
        
        if topOfStackIsToken("!") {
            shift()
            pushState(state_78)
            return
        }
        
        if topOfStackIsToken("<<") {
            shift()
            pushState(state_69)
            return
        }
        
        if topOfStackIsToken("return") {
            shift()
            pushState(state_165)
            return
        }
        
        if topOfStackIsToken("}") {
            shift()
            pushState(state_196)
            return
        }
        
        if topOfStackIsToken("char") {
            shift()
            pushState(state_21)
            return
        }
        
        if topOfStackIsToken("integer") {
            shift()
            pushState(state_80)
            return
        }
        
        if topOfStackIsToken("(") {
            shift()
            pushState(state_22)
            return
        }
        
        if topOfStackIsToken("&") {
            shift()
            pushState(state_85)
            return
        }
        
        if topOfStackIsToken("var") {
            shift()
            pushState(state_111)
            return
        }
        
        if topOfStackIsToken("~") {
            shift()
            pushState(state_59)
            return
        }
        
        if topOfStackIsToken("[") {
            shift()
            pushState(state_35)
            return
        }
        
        if topOfStackIsToken("sizeof") {
            shift()
            pushState(state_81)
            return
        }
        
        if topOfStackIsToken("string") {
            shift()
            pushState(state_68)
            return
        }
        
        if topOfStackIsToken("-") {
            shift()
            pushState(state_87)
            return
        }
        
        if topOfStackIsToken("if") {
            shift()
            pushState(state_169)
            return
        }
        
        if topOfStackIsToken("identifier") {
            shift()
            pushState(state_71)
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Call", input[index].description, "call")
        } else {
            throw ParseError.abruptEnd("Call", "call")
        }
        
	}
	
	private func state_196() throws {

        
        if topOfStackIsAmong([Optional("func"), Optional("import"), nil, Optional("macro"), Optional("struct")]) {
            reduce(8, to: "Function")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Function", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Function", "reduction")
        }
        
	}
	
	private func state_197() throws {

        
        if topOfStackIsAmong([Optional(","), Optional(")")]) {
            reduce(1, to: "Parameters")
            return
        }
        
        if index < input.count {
            throw ParseError.unexpected("Parameters", input[index].description, "reduction")
        } else {
            throw ParseError.abruptEnd("Parameters", "reduction")
        }
        
	}
	

}

public enum ParseError: Error {
    case unexpected(_ nonTerminal: String, _ content: String, _ expected: String)
    case abruptEnd(_ nonTerminal: String, _ expected: String)
}

public class SLRNode: CustomStringConvertible {
    
    public let type: String
    public let children: [SLRNode]
    
    public let token: Token?
    
    public var description: String { "\(type)" }
    
    public func printFullDescription(_ indent: Int) {
        print(String(repeating: "|   ", count: indent) + type)
        for child in children {
            child.printFullDescription(indent + 1)
        }
    }
    
    init(_ type: String, _ children: [SLRNode]) {
        self.type = type
        self.children = children
        self.token = nil
    }
    
    init(_ token: Token) {
        self.type = token.type
        self.children = []
        self.token = token
    }
    
}


