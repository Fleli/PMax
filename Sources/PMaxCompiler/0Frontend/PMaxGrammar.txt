
/PMaxGrammar.txt
Auto-generated by SwiftParse
See https://github.com/Fleli/SwiftParse

SwiftSLRMain -> TopLevelStatements
If -> #if Expression #{ FunctionBodyStatements #} 
If -> #if Expression #{ FunctionBodyStatements #} #else If 
Assignment -> #assign Expression #= Expression #; 
Assignment -> #assign Expression #@ SugarOperator #= Expression #; 
SugarOperator -> #|
SugarOperator -> #^
SugarOperator -> #&
SugarOperator -> #+
SugarOperator -> #-
SugarOperator -> #*
SugarOperator -> #/
SugarOperator -> #%
Return -> #return #; 
Return -> #return Expression #; 
Function -> Type #identifier #( Parameters #) #{ FunctionBodyStatements #} 
Parameter -> Type #identifier 
Struct -> #struct #identifier #{ StructBodyStatements #} 
Type -> #identifier 
Type -> Type #* 
TopLevelStatement -> Struct
TopLevelStatement -> Function
FunctionBodyStatement -> Declaration
FunctionBodyStatement -> Assignment
FunctionBodyStatement -> Return
FunctionBodyStatement -> If
FunctionBodyStatement -> While
Expression -> Expression #| CASEBExpression
Expression -> CASEBExpression
CASEBExpression -> CASEBExpression #^ CASECExpression
CASEBExpression -> CASECExpression
CASECExpression -> CASECExpression #& CASEDExpression
CASECExpression -> CASEDExpression
CASEDExpression -> CASEDExpression #== CASEEExpression
CASEDExpression -> CASEDExpression #!= CASEEExpression
CASEDExpression -> CASEEExpression
CASEEExpression -> CASEEExpression #< CASEFExpression
CASEEExpression -> CASEEExpression #> CASEFExpression
CASEEExpression -> CASEEExpression #<= CASEFExpression
CASEEExpression -> CASEEExpression #>= CASEFExpression
CASEEExpression -> CASEFExpression
CASEFExpression -> CASEFExpression #+ CASEGExpression
CASEFExpression -> CASEFExpression #- CASEGExpression
CASEFExpression -> CASEGExpression
CASEGExpression -> CASEGExpression #* CASEHExpression
CASEGExpression -> CASEGExpression #/ CASEHExpression
CASEGExpression -> CASEGExpression #% CASEHExpression
CASEGExpression -> CASEHExpression
CASEHExpression -> #<< CASEIExpression
CASEHExpression -> #>> CASEIExpression
CASEHExpression -> CASEIExpression
CASEIExpression -> #! CASEJExpression
CASEIExpression -> #~ CASEJExpression
CASEIExpression -> #- CASEJExpression
CASEIExpression -> CASEJExpression
CASEJExpression -> CASEJExpression #-> CASEKExpression
CASEJExpression -> CASEJExpression #. CASEKExpression
CASEJExpression -> CASEKExpression
CASEKExpression -> #( Expression #) 
CASEKExpression -> TypeCast #( Expression #) 
CASEKExpression -> #integer 
CASEKExpression -> #identifier 
CASEKExpression -> #identifier #( Arguments #) 
CASEKExpression -> #& Expression 
CASEKExpression -> #* Expression 
TypeCast -> #( #as Type #) 
While -> #while Expression #{ FunctionBodyStatements #} 
Argument -> Expression 
Argument -> #identifier #: Expression 
Declaration -> Type #identifier #; 
Declaration -> Type #identifier #= Expression #; 
FunctionBodyStatements -> FunctionBodyStatements FunctionBodyStatement
FunctionBodyStatements -> FunctionBodyStatement
FunctionBodyStatements ->
TopLevelStatements -> TopLevelStatements TopLevelStatement
TopLevelStatements -> TopLevelStatement
TopLevelStatements ->
StructBodyStatements -> StructBodyStatements Declaration
StructBodyStatements -> Declaration
StructBodyStatements ->
Parameters -> Parameters #, Parameter
Parameters -> Parameter
Parameters ->
Arguments -> Arguments #, Argument
Arguments -> Argument
Arguments ->
