class FunctionLabel {
    
    let name: String
    let type: DataType
    let parameters: [DataType]
    
    /// The body of the function, lowered to `AspartameStatement`s.
    var loweredBody: [AspartameStatement] = []
    
    /// Can be used by a caller to verify that the name and arguments passed actually line up with a function declaration. All function signatuers are generated by `functionSignature(_:_:)` in `a_FunctionSignature.swift` to ensure consistency in representation.
    let signature: String
    
    /// The `underlyingFunctionDeclaration` property is used for conversion from grammatical statements to `Aspartame`-form statements.
    let underlyingFunctionDeclaration: Function
    
    // TODO: Undersøk om dette gir Reference Cycle: `Aspartame`-objektet lagrer tross alt også referanser til alle `FunctionLabel`-objekter ...
    /// The `Aspartame` object that this `FunctionLabel` belongs to. Used for error submission and global scope information (functions and types).
    let aspartame: Aspartame
    
    /// Initialize a `FunctionLabel` if the grammatical `Type` returned and expected as parameters make sense.
    init?(_ function: Function, _ aspartame: Aspartame) {
        
        self.name = function.name
        self.aspartame = aspartame
        self.underlyingFunctionDeclaration = function
        
        let returnType = DataType(function.returnType, aspartame)
        
        // We attempt to convert all function parameters to their `DataType` equivalent.
        let parameters = function.parameters.compactMap { DataType($0.type, aspartame) }
        
        // If the returnType is non-`nil` and no parameters were "lost" in conversion, everything went fine. Otherwise,
        // an error occured during conversion.
        guard let returnType, parameters.count == function.parameters.count else {
            // TODO: Double check that no errors should be submitted from here.
            return nil
        }
        
        self.type = returnType
        self.parameters = parameters
        self.signature = functionSignature(name, parameters)
        
    }
    
}
